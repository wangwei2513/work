var access_token = "TOKEN50001002";
var Flag = 1;
var globalDomain = ".homed.me";

//测试点播id
//var testMacAddr = "00-27-1a-00-6b-2c";

var testMacAddr = "00-27-1a-00-6b-2c"//公司liancm测试需要 暂时保留
var deviceType = 1;//公司测试只能用mac  暂时保留//0：全部；1：机顶盒；2：CA卡；3：手机；4：pad；5：电脑 与上面testCardId对应

//现场实际的testMacAddr和deviceType --实际现场使用ca卡号登陆
if(typeof CAManager != "undefined"){
	testMacAddr = CAManager.cardSerialNumber;
	deviceType = 2;
}
//var slaveAddr = 'http://api.slave.homed.me:13160';
//var	accountAddr="http://access.homed.me";
var slaveAddr = ["http://10.14.41.245:13160",'http://slave.homed.me:13160'][Flag];
var	accountAddr= ["http://10.14.41.244:12690","http://access.homed.me"][Flag];
var cfxwLabel = 7236;
function $(_id) {
    return document.getElementById(_id);
}
//打印测试
function iDebug(str) {
    if (navigator.appName.indexOf("iPanel") != -1) {
        iPanel.debug(str); //假如要看打印的时间，可以改：iPanel.debug(str, 2);
    } else if (navigator.appName.indexOf("Opera") != -1) {
        opera.postError(str);
    } else if (navigator.appName.indexOf("Netscape") != -1 || navigator.appName.indexOf("Google") != -1) {
        console.log(str);
    }
}

function sendAjax(url, data, callback) {
    var xmlhttp;
    var isAsync = false;;
    if (window.XMLHttpRequest) {
        xmlhttp = new XMLHttpRequest();
    } else if (window.ActiveXObject) {
        if (typeof arguments.callee.activeXString != "string") {
            var versions = ["MSXML2.XMLHttp.6.0", "MSXML2.XMLHttp.3.0", "MSXML2.XMLHttp"];
            for (var i = 0, len = versions.length; i < len; i++) {
                try {
                    xmlhttp = new ActiveXObject(versions[i]);
                    arguments.callee.activeXString = versions[i];
                } catch (ex) {
                    //跳过
                    if (len - 1 == i) {
                        throw new Error("there is no xmlhttprequest object available");
                    }
                }
            }
        } else {
            xmlhttp = new ActiveXObject(arguments.callee.activeXString);
        }
    }
    xmlhttp.overrideMimeType("text/html; charset=UTF-8");
    xmlhttp.onreadystatechange = function() {
        iDebug("readyState:---------" + xmlhttp.readyState + "status:-----" + xmlhttp.status);
        if (xmlhttp.readyState == 4) {

            if (xmlhttp.status == 200 || xmlhttp.status == 0) {
                callback(xmlhttp.responseText);
            }
        }
    }
    if (data != null && typeof data != "undefined") {
        xmlhttp.open("POST", url, isAsync);
        xmlhttp.send(data);
    } else {
        xmlhttp.open("GET", url, isAsync);
        xmlhttp.send(null);
    }
}
/*----------------------------------------返回字符串汉字长度 英文或特殊字符两个相当于一个汉字---------------------------------------------------------*/
/*
 *str:传入的字符串
 *len:字符串的最大长度
 *返回截取的字符串
 */
function getStrChineseLen(str, len) {
    var w = 0;
    str = str.replace(/[ ]*$/g, "");
    if (getStrChineseLength(str) > len) {
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            var flag = 0;
            //单字节加1
            if ((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {
                w++;
                flag = 0;
            } else {
                w += 2;
                flag = 1;
            }
            if (parseInt((w + 1) / 2) > len) {
                if (flag == 1) return str.substring(0, i - 1) + ".."; //修改,sunny,防止换行...
                else return str.substring(0, i - 2) + "..";
                break;
            }

        }
    }
    return str;
}

function getStrChineseLength(str) {
    str = str.replace(/[ ]*$/g, "");
    var w = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        //单字节加1
        if ((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {
            w++;
        } else {
            w += 2;
        }
    }
    var length = w % 2 == 0 ? (w / 2) : (parseInt(w / 2) + 1);
    return length;
}
//*******************************获取标准URL的参数 start************************//
/**
 * 获取标准URL的参数
 * @_key：字符串，不支持数组参数（多个相同的key）
 * @_url：字符串，（window）.location.href，使用时别误传入非window对象
 * @_spliter：字符串，参数间分隔符
 * 注意：
 * 	1、如不存在指定键，返回空字符串，方便直接显示，使用时注意判断
 * 	2、非标准URL勿用
 * 	3、query（？）与hash（#）中存在键值一样时，以数组返回
 */
function getUrlParams(_key, _url, _spliter) {
    //iPanel.debug("common.js===getUrlParams====_url" + _url);
    if (typeof(_url) == "object") {
        var url = _url.location.href;
    } else {
        var url = _url ? _url : window.location.href;
    }
    if (url.indexOf("?") == -1 && url.indexOf("#") == -1) {
        return "";
    }
    var spliter = _spliter || "&";
    var spliter_1 = "#";
    var haveQuery = false;
    var x_0 = url.indexOf(spliter);
    var x_1 = url.indexOf(spliter_1);
    var urlParams;
    if (x_0 != -1 || x_1 != -1 || url.indexOf("?") != -1) {
        if (url.indexOf("?") != -1) urlParams = url.split("?")[1];
        else if (url.indexOf("#") != -1) urlParams = url.split("#")[1];
        else urlParams = url.split(spliter)[1];
        if (urlParams.indexOf(spliter) != -1 || urlParams.indexOf(spliter_1) != -1) { //可能出现 url?a=1&b=3#c=2&d=5 url?a=1&b=2 url#a=1&b=2的情况。
            var v = [];
            if (urlParams.indexOf(spliter_1) != -1) {
                v = urlParams.split(spliter_1);
                urlParams = [];
                for (var x = 0; x < v.length; x++) {
                    urlParams = urlParams.concat(v[x].split(spliter));
                }
            } else {
                urlParams = urlParams.split(spliter);
            }
        } else {
            urlParams = [urlParams];
        }
        haveQuery = true;
    } else {
        urlParams = [url];
    }
    var valueArr = [];
    for (var i = 0, len = urlParams.length; i < len; i++) {
        var params = urlParams[i].split("=");
        if (params[0] == _key) {
            valueArr.push(params[1]);
        }
    }
    if (valueArr.length > 0) {
        if (valueArr.length == 1) {
            return valueArr[0];
        }
        return valueArr;
    }
    return "";
}

function setGlobalVar(_name, _value) { //设置全局变量
    if (navigator.appName.indexOf("iPanel") != -1) {
        iPanel.setGlobalVar(_name, _value);
    } else {
        var b1 = JSON.stringify(_value);
        sessionStorage.setItem(_name, b1);
    }
}

function getGlobalVar(_name) { //获取全局变量
    if (navigator.appName.indexOf("iPanel") != -1) {
        return iPanel.getGlobalVar(_name);
    } else {
        return JSON.parse(sessionStorage.getItem(_name));
    }
}

function delGlobalVar(_name) { //删除全局变量
    if (navigator.appName.indexOf("iPanel") != -1) {
        iPanel.delGlobalVar(_name);
    } else {
        sessionStorage.removeItem(_name);
    }
}


function showTime() {
    //setInterval(function() {
    $("timer").innerHTML = new Date().Format("yyyy-MM-dd");
    //}, 1000);
}
Date.prototype.Format = function(fmt) {
    var o = {
        "y+": this.getYear(),
        "M+": this.getMonth() + 1,
        "d+": this.getDate(),
        "h+": this.getHours(),
        "m+": this.getMinutes(),
        "s+": this.getSeconds()
    };
    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
};
function ajaxClass(_url, _successCallback, _failureCallback, _urlParameters, _callbackParams, _async, _charset, _timeout, _frequency, _requestTimes, _frame) {
    /**
     * AJAX通过GET或POST的方式进行异步或同步请求数据
     * 注意：
     * 	1、服务器240 No Content是被HTTP标准视为请求成功的
     * 	2、要使用responseXML就不能设置_charset，需要直接传入null
     * 	3、_frame，就是实例化本对象的页面对象，请尽量保证准确，避免出现难以解释的异常
     */
    /**
     * @param{string} _url: 请求路径
     * @param{function} _successCallback: 请求成功后执行的回调函数，带一个参数（可扩展一个）：new XMLHttpRequest()的返回值
     * @param{function} _failureCallback: 请求失败/超时后执行的回调函数，参数同成功回调，常用.status，.statusText
     * @param{string} _urlParameters: 请求路径所需要传递的url参数/数据
     * @param{*} _callbackParams: 请求结束时在回调函数中传入的参数，自定义内容
     * @param{boolean} _async: 是否异步调用，默认为true：异步，false：同步
     * @param{string} _charset: 请求返回的数据的编码格式，部分iPanel浏览器和IE6不支持，需要返回XML对象时不能使用
     * @param{number} _timeout: 每次发出请求后多长时间内没有成功返回数据视为请求失败而结束请求（超时）
     * @param{number} _frequency: 请求失败后隔多长时间重新请求一次
     * @param{number} _requestTimes: 请求失败后重新请求多少次
     * @param{object} _frame: 窗体对象，需要严格控制，否则会有可能出现页面已经被销毁，回调还执行的情况
     */
    this.url = _url || "";
    this.successCallback = _successCallback || function(_xmlHttp, _params) {
        //iPanel.debug("[xmlHttp] responseText: " + _xmlHttp.responseText);
    };
    this.failureCallback = _failureCallback || function(_xmlHttp, _params) {
        //iPanel.debug("[xmlHttp] status: " + _xmlHttp.status + ", statusText: " + _xmlHttp.statusText);
    };
    this.urlParameters = _urlParameters || "";
    this.callbackParams = _callbackParams || null;
    this.async = typeof(_async) == "undefined" ? true : _async;
    this.charset = _charset || null;
    this.timeout = _timeout || 30000; //15s
    this.frequency = _frequency || 10000; //10s
    this.requestTimes = _requestTimes || 0;
    this.frame = _frame || window;

    this.timer = -1;
    this.counter = 0;

    this.method = "GET";
    this.headers = null;
    this.username = "";
    this.password = "";

    this.checkTimeout = 500;
    this.checkTimer = -1;
    this.checkCount = -1;

    this.createXmlHttpRequest = function() {
        var xmlHttp = null;
        try { //Standard
            xmlHttp = new XMLHttpRequest();
        } catch (exception) { //Internet Explorer
            try {
                xmlHttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (exception) {
                try {
                    xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");
                } catch (exception) {
                    return false;
                }
            }
        }
        return xmlHttp;
    };

    this.xmlHttp = this.createXmlHttpRequest();

    this.requestData = function(_method, _headers, _username, _password) {
        /**
         * @param{string} _method: 传递数据的方式，POST/GET
         * @param{string} _headers: 传递数据的头信息，json格式
         * @param{string} _username: 服务器需要认证时的用户名
         * @param{string} _password: 服务器需要认证时的用户密码
         */
        this.xmlHttp = this.createXmlHttpRequest();
        this.frame.clearTimeout(this.timer);
        this.method = typeof(_method) == "undefined" ? "GET" : (_method.toLowerCase() == "post") ? "POST" : "GET";
        this.headers = typeof(_headers) == "undefined" ? null : _headers;
        this.username = typeof(_username) == "undefined" ? "" : _username;
        this.password = typeof(_password) == "undefined" ? "" : _password;

        var target = this;
        this.xmlHttp.onreadystatechange = function() {
            target.stateChanged();
        };
        if (this.method == "POST") { //encodeURIComponent
            var url = encodeURI(this.url);
            var data = this.urlParameters;
        } else {
            //var url = encodeURI(this.url + (((this.urlParameters != "" && this.urlParameters.indexOf("?") == -1) && this.url.indexOf("?") == -1) ? ("?" + this.urlParameters) : this.urlParameters));
            var url = encodeURI(encodeURI(this.url));
            //iPanel.debug("[xm] xmlHttp get url00="+url);
            var data = null;
        }
        if (this.username != "") {
            this.xmlHttp.open(this.method, url, this.async, this.username, this.password);
        } else {
            this.xmlHttp.open(this.method, url, this.async);
        }
        var contentType = false;
        if (this.headers != null) {
            for (var key in this.headers) {
                if (key.toLowerCase() == "content-type") {
                    contentType = true;
                }
                this.xmlHttp.setRequestHeader(key, this.headers[key]);
            }
        }
        if (!contentType) {
            this.xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        }
        if (this.charset != null) { //要使用responseXML就不能设置此属性
            this.xmlHttp.overrideMimeType("text/html; charset=" + this.charset);
        }
        //iPanel.debug("[xmlHttp] requestData " + this.method + " url: " + url + ", data: " + data);
        this.xmlHttp.send(data);
        this.checkReadyState();
        this.timer = this.frame.setTimeout(function() {
            target.checkStatus();
        }, this.timeout);
    };
    this.checkReadyState = function() {
        var target = this;
        this.frame.clearTimeout(this.checkTimer);
        this.checkTimer = this.frame.setTimeout(function() {
            //iPanel.debug("global checkReadyState target.xmlHttp.readyState="+target.xmlHttp.readyState);
            //iPanel.debug("global checkReadyState target.xmlHttp.status="+target.xmlHttp.status);
            if (target.xmlHttp.readyState == 4 && (target.xmlHttp.status == 200 || target.xmlHttp.status == 204 || target.xmlHttp.status == 0)) {
                target.stateChanged();
            } else {
                target.checkCount++;
                if ((target.checkCount * target.checkTimeout) >= target.timeout) {
                    target.checkStatus();
                } else {
                    target.checkReadyState();
                }
            }
        }, this.checkTimeout);
    };
    this.stateChanged = function() { //状态处理
        //iPanel.debug("[xmlHttp] readyState=" + this.xmlHttp.readyState);
        if (this.xmlHttp.readyState < 2) {

        } else {
            //iPanel.debug("[xmlHttp] readyState=" + this.xmlHttp.readyState + ", status=" + this.xmlHttp.status);
        }

        var target = this;
        if (this.xmlHttp.readyState == 2) {
            /*this.timer = this.frame.setTimeout(function() {
            		target.checkStatus();
            	}, this.timeout); */
        } else if (this.xmlHttp.readyState == 3) {
            if (this.xmlHttp.status == 401) {
                //iPanel.debug("[xmlHttp] Authentication, need correct username and pasword");
            }
        } else if (this.xmlHttp.readyState == 4) {
            this.frame.clearTimeout(this.timer);
            this.frame.clearTimeout(this.checkTimer);
            if (this.xmlHttp.status == 200 || this.xmlHttp.status == 204 || this.xmlHttp.status == 0) {
                //iPanel.debug("[xmlHttp] this.xmlHttp.resposeText=" + this.xmlHttp.responseText);
                this.success();
            }
            /*else if(this.xmlHttp.status == 0){
            	iPanel.debug("global_stateChanged_this.xmlHttp.status==0--一般为0的状态是库里发的");
            }*/
            else {
                //iPanel.debug("global_stateChanged_this.xmlHttp.status=="+this.xmlHttp.status);
                this.failed();
            }
        }
    };
    this.success = function() {
        this.checkCount = -1;
        this.frame.clearTimeout(this.checkTimer);
        if (this.callbackParams == null) {
            this.successCallback(this.xmlHttp);
        } else {
            this.successCallback(this.xmlHttp, this.callbackParams);
        }
        this.counter = 0;
    };
    this.failed = function() {
        this.checkCount = -1;
        this.frame.clearTimeout(this.checkTimer);
        if (this.callbackParams == null) {
            this.failureCallback(this.xmlHttp);
        } else {
            this.failureCallback(this.xmlHttp, this.callbackParams);
        }
        this.counter = 0;
    };
    this.checkStatus = function() { //超时处理，指定时间内没有成功返回信息按照失败处理
        if (this.xmlHttp.readyState != 4) {
            if (this.counter < this.requestTimes) {
                this.requestAgain();
            } else {
                this.failed();
                this.requestAbort();
            }
        }
    };
    this.requestAgain = function() {
        this.requestAbort();
        var target = this;
        this.frame.clearTimeout(this.timer);
        this.timer = this.frame.setTimeout(function() {
            target.counter++;
            target.requestData(target.method, target.headers, target.username, target.password);
        }, this.frequency);
    };
    this.requestAbort = function() {
        this.checkCount = -1;
        this.frame.clearTimeout(this.timer);
        this.frame.clearTimeout(this.checkTimer);
        //iPanel.debug("[xmlHttp] call abort typeof this.xmlHttp="+typeof this.xmlHttp);
        //iPanel.debug("[xmlHttp] call abort typeof this.xmlHttp.abort="+typeof this.xmlHttp.abort);
        //abort()方法可以停止一个XMLHttpRequest对象对HTTP的请求，把该对象恢复到初始状态
        this.xmlHttp.abort();
    };
    this.addParameter = function(_json) {
        /**
         * @param{object} _json: 传递的参数数据处理，只支持json格式
         */
        var url = this.url;
        var str = this.urlParameters;
        for (var key in _json) {
            if (url.indexOf("?") != -1) {
                url = "";
                if (str == "") {
                    str = "&" + key + "=" + _json[key];
                } else {
                    str += "&" + key + "=" + _json[key];
                }
                continue;
            }
            if (str == "") {
                str += "?";
            } else {
                str += "&";
            }
            str += key + "=" + _json[key];
        }
        this.urlParameters = str;
        return str;
    };
    this.getResponseXML = function() { //reponseXML of AJAX is null when response header 'Content-Type' is not include string 'xml', not like 'text/xml', 'application/xml' or 'application/xhtml+xml'
        if (this.xmlHttp.responseXML != null) {
            return this.xmlHttp.responseXML;
        } else if (this.xmlHttp.responseText.indexOf("<?xml") != -1) {
            return typeof(DOMParser) == "function" ? (new DOMParser()).parseFromString(this.xmlHttp.responseText, "text/xml") : (new ActivexObject("MSXML2.DOMDocument")).loadXML(this.xmlHttp.responseText);
        }
        return null;
    };
}
function setGlobalParms(kvJsonObj) {
    if (navigator.appName.indexOf("iPanel") != -1) {
        for (var key in kvJsonObj) {
            iPanel.setGlobalVar(key + "", kvJsonObj[key] + "");
        }
        iPanel.misc.save();
    } else {
        for (var key in kvJsonObj) {
            sessionStorage.setItem(key, kvJsonObj[key]);
        }
    }
}

function getGlobalParms(key) {
    var value = "";
    if (navigator.appName.indexOf("iPanel") != -1) {
        value = iPanel.getGlobalVar(key + "");
    } else {
        var value = sessionStorage.getItem(key);
    }
    if ((typeof value) == "undefined" || value == null || value == "") return "";
    else return value;
}

function removeGlobalParms(keys) {
    if (typeof keys == "undefined" || keys.length <= 0) return;
    if (navigator.appName.indexOf("iPanel") != -1) {
        for (var i = 0, len = keys.length; i < len; i++) {
            iPanel.delGlobalVar(keys[i] + "");
        }
        iPanel.misc.save();
    } else {
        for (var i = 0, len = keys.length; i < len; i++) {
            sessionStorage.removeItem(keys[i] + "");
        }
    }
}